schema {
  query: QueryRoot
}

type QueryRoot {
  directory: Directory
  tokens: [Token!]!
  pools: [Pool!]!
  ticks: [Tick!]!
  positions: [Position!]!
}

type Directory {
  # factory address
  id: ID!
  # amount of pools created
  total_pools: BigInt!
  # amoutn of transactions all time
  txn_count: BigInt!
  # current owner of the factory
  owner: ID!
}

type Token {
  # token address
  id: ID!
  # volume in token units
  volume: BigDecimal!
  # transactions across all pools that include this token
  txn_count: BigInt!
  # number of pools containing this token
  pool_count: BigInt!
}

type Pool @entity {
  # pool address Zz
  id: ID!
  # token0
  token0: ContractId!
  # token1
  token1: ContractId!
  # fee amount
  swap_fee: UInt8!
  # in range liquidity
  liquidity: U128!
  # current price
  sqrt_price: Q64x64!
  # token0 global fee growth
  fee_growth_global0: Q64x64!
  # token1 global fee growth
  fee_growth_global1: Q64x64!
  # current tick
  nearest_tick: I24!
}

type Tick {
  # format: <pool address>#<tick index>
  id: ID!
  # pool address
  pool: Pool!
  # tick index
  tick_index: I24!
  # pointer to pool
  pool: Pool!
  # total liquidity pool has as tick lower or upper
  liquidity_at_tick: U128
  # how much liquidity changes when tick crossed
  liquidity_delta: U128
}

type Position {
  # sender + pool_address + upper_index + lower_index + txn_hash
  id: ID!
  # owner of the Position
  owner: Identity!
  # pool position is within
  pool: Pool!
  # lower tick of the position
  lower_index: I24!
  # upper tick of the position
  upper_index: I24!
  # total position liquidity
  liquidity: U128!
  # all time collected fees in token0
  token0_fees_collected: UInt8!
  # all time collected fees in token1
  token1_fees_collected: UInt8!
  # vars needed for fee computation
  fee_growth_inside0_last: Q64x64!
  fee_growth_insde1_last: Q64x64!
}

type Q64x64 {
  integer: UInt8!
  decimal: UInt8!
}

type U128 {
  upper: UInt8!
  lower: UInt8!
}

type I24 {
  value: UInt4!
}
